#!/usr/bin/env python

import cmd
from subprocess import call, check_output


VERSION = "1.0"
INTRO = \
"""%(git_version)s

Gyt %(gyt_version)s -- An enhanced Git console through Python.
help      -> Git's own help system.
?command   -> Details about Git 'command', can be used as 'command?'.
"""

def get_git_version():
    """Get git version or exit with error."""

    git_version = check_output(["git", "--version"])

    if not git_version.startswith("git"):
        print("Git is not installed in your system.")
        exit(2)

    return git_version.rstrip('\n')

def get_git_commands():
    """Get git commands from 'git help' output."""

    names = []
    output = check_output(["git", "help", "-a"])

    for s in output.split('\n')[8:-2]:
        names.extend(cmd.strip() for cmd in s.split())

    return sorted(names)


class Gyt(cmd.Cmd):
    """Simple overdrive ;)"""

    prompt = "git "
    intro = INTRO % \
            {"git_version": get_git_version(), "gyt_version": VERSION}

    def do_git(self, cmd):
        cmd = ['git', ] + cmd.split()
        call(cmd)

    def get_names(self):
        return get_git_commands()

    def precmd(self, line):

        ln, line = len(line), line.strip("?")

        if ln > len(line):
            line = "help %s" % (line,)

        return "git %s" % (line,) if line is not "EOF" else line

    def completenames(self, text, *ignored):
        return [a for a in self.get_names() if a.startswith(text)]

    def do_EOF(self, line):
        print('^D')

        return True


def main():

    try:
        Gyt().cmdloop()
    except KeyboardInterrupt:
        print('^C')
        exit(0)


if __name__ == '__main__':
    main()
